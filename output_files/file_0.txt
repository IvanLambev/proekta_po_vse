b'\n\n\n\n\n   Python Scripts vs. Jupyter Notebooks: Pros and Cons |   LearnPython.com \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearnPython.com\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSkip navigation\n\n\nCourses\n\nPython Library\n                        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArticles\n\n\n\n\nLog in\n\n\nCreate free account\n\n\nfullName\n\nUser profile menu open\nOpen user profile menu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfullName\n\n\nDashboard\n\n\nMy Profile\n\n\nPayment & Billing\n\n\n\nLog out \n                            \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMENU\nCLOSE\n\n\n\n\n\n\n\n\nCourses\n\nArticles\n\n\nDashboard\n\n\nMy Profile\n\n\nPayment & Billing\n\n\n\n\nLog in\n\n\nCreate free account\n\n\n\n\nLog out\xc2\xa0\n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBack to articles list\nArticles\n\n\n\n\n\n\n\n\n\n\n\n          23rd Nov 2022\n        \n8 minutes read\nPython Scripts vs. Jupyter Notebooks: Pros and Cons\n \n\n\n\nJuliano Luiz Faccioni\n\n\n\n\n\n\npython\n\n\nscript\n\n\njupyter notebook\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearn the ins and outs of Python scripts and Jupyter Notebooks, including when to use each one.\nThere are many tools available to Python developers. Since this language\xe2\x80\x99s early days, Python scripts have been the canonical way of writing and sharing Python code. But in the past few years, Jupyter Notebooks have gained considerable recognition among data scientists as a powerful tool for testing ideas and sharing results. But what exactly sets Jupyter Notebooks apart from Python scripts? What are the advantages and disadvantages of each, and when would you want to use one or the other?\nIn this article, we will explore the pros and cons of Python scripts and Jupyter Notebooks. We will start by defining exactly how Python scripts and Jupyter Notebooks work and then move on to compare their strengths and weaknesses. Let\xe2\x80\x99s get right into it!\nWhat Are Python Scripts?\nSimply put, a Python script is a plain text file ending with the .py extension. You can open, edit, and save Python scripts with programs called text editors. There are a plethora of text editors to choose from, including some that work directly in a terminal window (like nano and vi). Even Windows Notepad works as an okay text editor in a pinch.\nAnother option for creating and editing Python scripts is an integrated development environment (IDE). These are programs designed specifically for software development. They include many useful features such as a text editor, a debugger, and a terminal window. IDEs can even help you write better code by giving you autocomplete suggestions and helping you adhere to code style guidelines. Visual Studio Code (VSCode) and PyCharm are two commonly used IDEs for writing Python scripts.\nIf you want a deeper dive on the software used to write Python scripts, we have articles on Python text editors and Python IDEs. Be sure to check them out!\nHow Are Python Scripts Executed?\nPython scripts are executed linearly, in a top-down fashion. The script starts executing from the first line and then moves down one line at a time until it reaches the last line and stops. To see the results of any changes you make, you need to re-execute the whole file \xe2\x80\x93 even if you only altered a single line.\nAfter writing and saving a Python script, you can run it by executing the python command on your terminal. For example, in order to run the script my_script.py, you would type:\n\npython my_script.py\nThe command above assumes that your terminal is currently inside the folder where the my_script.py file is located. If you\xe2\x80\x99re unsure of how to do this, take a look at this article about how to navigate around a terminal.\n\nIf you\xe2\x80\x99re using an IDE, there\xe2\x80\x99s probably a button in the interface that allows you to execute the Python script directly. Additionally, depending on your Python installation and operating system, you may be able to execute a Python script by simply double-clicking the script file.\nWhat Are Jupyter Notebooks Used For?\nJupyter Notebooks are a bit more complex than regular Python scripts. A Jupyter Notebook consists of multiple cells. Each cell can contain either a block of Python code or plain text (just like in a regular document). This means that you can surround bits of code with useful information, like explanations, links, and images. This makes it easier for you and your colleagues to refer back to the code and understand what it is doing. Output, such as printed messages or plots, appears under each cell in the Notebook.\n\nJupyter Notebooks allow you to mix Python code blocks with formatted text.\nUnlike Python scripts, Jupyter Notebooks are executed in a nonlinear fashion. This means that you can execute code blocks in an arbitrary order instead of being forced to execute every block from the top to the bottom.\nWhile this nonlinearity may lead to some confusion if you run lots of blocks out of order, it also means that you don\xe2\x80\x99t have to re-run previous parts of the code after each small change. This can be very helpful if, for example, your code spends a long time loading data from a database. While a regular Python script has to reload the entire dataset on each execution, a Jupyter Notebook lets you run the cell responsible for loading the data once. You can then create new cells to work with the data without ever needing to reload it.\nBy the way: If you want to learn how to load data from different kinds of sources, have a go at our Data Processing with Python track!\n\nThe iterative and exploratory nature of Jupyter Notebooks has turned them into a staple in the data science field. In fact, many data scientists prefer to work with Jupyter Notebooks because it\xe2\x80\x99s easier to test ideas, create prototypes, and share results with colleagues.\nHow Do You Use a Jupyter Notebook?\nJupyter Notebooks are stored in notebook files, which have the .ipynb extension. Unlike Python scripts, these files are not meant to be directly opened with text editors. Instead, you need to serve these files from a Jupyter server and interact with them through a web browser interface using software like Chrome or Firefox. This is true even if you are editing local Notebooks, without accessing anything over the internet. If this is all going over your head, don\xe2\x80\x99t worry! We have an article on how to install and run Jupyter Notebooks ready for you.\nFor all of their features, Jupyter Notebooks are somewhat harder to set up than Python scripts. First, you need to install the jupyter-notebook package in your Python environment. Although you can use pip to install it, most data scientists use anaconda, a Python installation that comes bundled with lots of useful data science packages.\nAdditionally, the fact that you need to initialize a Jupyter server in order to access Jupyter Notebooks \xe2\x80\x93 even if you simply want to create and edit them on your own local computer \xe2\x80\x93 can be confusing at first.\nPros and Cons of Python Scripts and Jupyter Notebooks\nIn the previous sections, we briefly touched upon some of the advantages and disadvantages of Python scripts and Jupyter Notebooks. Here is a detailed list of the pros and cons of each solution.\nPython scripts\nPros:\n\nScripts are reliable and the most common way to write Python code.\nMinimal setup is required (you only need a text editor).\nTop-down execution makes it less confusing to debug and reason through the code.\nThere are many text editors and IDEs with tons of features to choose from.\nScripts support modularity. Variables and functions inside a Python script can be imported from another script.\n\nCons:\n\nScripts must be re-executed to test any changes to the code.\nScripts are plain text files. Formatted text or figures cannot be added to them.\nBy default, no output is saved anywhere. The script must be re-executed to see messages, outputs, and results.\n\nJupyter Notebooks\nPros:\n\nCode blocks can be surrounded by helpful notes, figures, and links.\nNotebooks provide nonlinear execution. Code cells can be run independently from one another.\nOutput (such as messages, plots, and dataframes) appear automatically under each cell, and look great out-of-the-box.\nNotebooks are good for prototyping data analyses and sharing results with colleagues.\n\nCons:\n\nNotebooks require installing the jupyter-notebook package into your Python environment.\nNotebooks must be served and accessed through a web browser, making them slightly harder to use than scripts.\nNonlinear execution can make debugging confusing, especially if you lose track of which cells you have executed or not.\nSharing code or data across Notebooks is not straightforward.\n\nPython Scripts and Jupyter Notebooks \xe2\x80\x93 Which Should You Use?\nWe have examined the differences between Python scripts and Jupyter Notebooks, but one question remains: Which is better? Well, it depends on what you are trying to accomplish.\nJupyter Notebooks truly shine when you are analyzing data and testing new ideas as a data scientist. You can load the data once in the first code cell, then test a bunch of different analyses in other cells. Once you are happy with your discoveries, you can add informative text and figures to the Notebook and share it with colleagues.\nPython scripts, on the other hand, are not as iterative as Jupyter Notebooks. They are suited for code that is less dynamic in nature, going over its lines in a predictable top-down fashion. You want to use Python scripts for code that is less about exploring or testing, and more about writing fixed routines or pipelines that may be imported in other scripts.\nA nice compromise between Python scripts and Jupyter Notebooks is to start out with a Notebook, using it to explore ideas and get a clearer picture of what you need to do. As your ideas solidify, you can copy the pieces of code in each cell to a Python script, which will hold the \xe2\x80\x9cfinal\xe2\x80\x9d version of the analysis.\nThat\xe2\x80\x99s it for this article \xe2\x80\x93 we hope you got a good understanding of the advantages and disadvantages of Python scripts and Jupyter Notebooks! If you need more resources to kickstart your Python studies, why not read about the most popular Python libraries or having a go at our Learn Programming with Python track? Happy learning!\n\n\n\n\nTags:\n\n\n\npython\n\n\nscript\n\n\njupyter notebook\n\n\n\n\n\n\n\n\n\n\n\nYou may also like\n\n\n\n\n\n\n\nJupyter Notebook \xe2\x80\x93 the Free Editor for Python\n\n              Find out how to install and get started with the Jupyter Notebook - Python IDE dedicated for Data Science projects.\n              \n              \n\nRead more\n\n\n\n\n\n\n\n\nThe Most Popular Python Libraries\n\n              Read this article to discover the most popular Python libraries.\n              \n              \n\nRead more\n\n\n\n\n\n\n\n\nObject Serialization in Python\n\n              Serialization is a useful technique for saving complex objects. Here, we explain why this is important and show you some useful tools.\n              \n              \n\nRead more\n\n\n\n\n\n\n\n\nThings That Can Help You Write Better Python Code\n\n              Discover some of the best practices for writing better Python code.\n              \n              \n\nRead more\n\n\n\n\n\n\n\n\nA Guide to the Python argparse Module\n\n              Discover how to build a command-line interface with the Python argparse module.\n              \n              \n\nRead more\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSubscribe to our newsletter\nJoin our monthly newsletter to be  notified about the latest posts.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                        Email address\n                    \n\n\n\n\n\n\n\n\n\n\n\n\n\nHow Do You Write a SELECT Statement in SQL?\n\n\n\nWhat Is a Foreign Key in SQL?\n\n\n\nEnumerate and Explain All the Basic Elements of an SQL Query\n\n\n\n\n\n\n\n\n\n\n\nQuick links\n\nPricing\nBlog\nVertabelo.com\n\n\n\nAssistance\nNeed assistance? Drop us a line at contact@learnpython.com\nWrite to us\n\n\nFollow us\n\n\n\nLearnSQL Facebook\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe Learn SQL Facebook\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVertabelo Linkedin\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe Learn SQL Youtube\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                Copyright \xc2\xa92016-2018 Vertabelo SA All rights reserved\n                \n\n\n\n\n\nTerms of service\nPrivacy policy\nImprint\n\n\n\n\n\n\n'