b"How to take a List from user input in Python | bobbyhadz\xe2\x98\xb0HomeBookAboutContactsHomeBookAboutContactsGitHubLinkedinTwitterHow to take a List from user input in PythonBorislav HadzhievReading time\xc2\xb77 min# Table of ContentsAdd user input to a list in PythonTake a list of integers from user Input in PythonTake list user input using str.split()Take a list of integers from user Input using str.split()Take list user input using a while loopTake a list of integers from user Input using a while loopTake a list of lists user inputTake a two-dimensional list of integers from user input# Add user input to a list in PythonTo add user input to a list in Python:Declare a variable that stores an empty list.Use the range() class to loop N times in a for loop.On each iteration, append the input value to the list.main.pyCopied!shopping_list = []\n\nlist_length = 3\n\nfor idx in range(list_length):\n    item = input('Enter item to buy: ')\n    shopping_list.append(item)\n\nprint(shopping_list)  # \xf0\x9f\x91\x89\xef\xb8\x8f ['apple', 'banana', 'kiwi']\nThe code sample prompts the user for input 3 times and adds each value to the\nlist.The list.append() method\nadds an item to the end of the list.The example uses the range class, but you can\nalso use a while loop if you want to make sure the list has a length of at\nleast N items.main.pyCopied!shopping_list = []\n\nmax_length = 3\n\nwhile len(shopping_list) < max_length:\n    item = input('Enter item to buy: ')\n    shopping_list.append(item)\n\nprint(shopping_list)  # \xf0\x9f\x91\x89\xef\xb8\x8f ['apple', 'banana', 'kiwi']\nIf the list has a length of less than 3, we keep prompting the user for input.This approach is especially useful when you want to make sure there aren't any duplicates in the list.main.pyCopied!shopping_list = []\n\nmax_length = 3\n\nwhile len(shopping_list) < max_length:\n    item = input('Enter item to buy: ')\n\n    # \xf0\x9f\x91\x87\xef\xb8\x8f make sure item is not in list before appending\n    if item not in shopping_list:\n        shopping_list.append(item)\n\nprint(shopping_list)  # \xf0\x9f\x91\x89\xef\xb8\x8f ['apple', 'banana', 'kiwi']\nWe used an if statement to check if the value the user entered isn't in the\nlist before appending it.The in operator tests\nfor membership. For example, x in l evaluates to True if x is a member of\nl, otherwise it evaluates to False.x not in l returns the negation of x in l.An alternative approach is to ask the user to enter multiple, space or comma-separated words and split the string on the separator.main.pyCopied!user_input = ''\n\nwhile user_input.count(' ') < 2:\n    user_input = input('Enter at least 3 space-separated shopping items: ')\n\n\nshopping_list = user_input.split(' ')\n\n\nprint(shopping_list)  # \xf0\x9f\x91\x89\xef\xb8\x8f ['apple', 'banana', 'kiwi']\nNote that this approach is a bit harder to validate.The str.split() method\nsplits the string into a list of substrings using a delimiter.The method takes the following 2 parameters:NameDescriptionseparatorSplit the string into substrings on each occurrence of the separatormaxsplitAt most maxsplit splits are done (optional)If the separator is not found in the string, a list containing only 1 element is\nreturned.Here is another example of taking a list from user input.main.pyCopied!my_list = []\n\nfor _ in range(3):\n    my_list.append(input('Enter a country: '))\n\nprint(my_list)\nThe code snippet loops 3 times, takes input from the user and appends it to a\nlist.The list.append() method\nadds an item to the end of the list.I used an underscore for the variable name because we don't need to access it.# Take a list of integers from user Input in PythonIf you need to store integer values in a list, use the\nint() class to convert the\ninput strings to integers.main.pyCopied!my_list = []\n\nfor _ in range(3):\n    try:\n        my_list.append(int(input('Enter a number: ')))\n    except ValueError:\n        print('The provided value is not an integer')\n\n\nprint(my_list)\nThe input function takes an optional prompt\nargument and writes it to standard output without a trailing newline.The function then reads the line from the input, converts it to a string and\nreturns the result.The input() function is guaranteed to return a string, even if the user enters an integer.We used a try/except\nstatement to handle the ValueError that is raised if the int() class is\ncalled with a value that is not a valid integer.An alternative approach is to ask the user to enter multiple, space or\ncomma-separated words and split the string on the separator.# Take list user input using str.split()This is a three-step process:Use the input() function to take input from the user.Use the str.split() method to\nsplit the string on each whitespace.The split() method will return a list containing the words the user\nentered.main.pyCopied!user_input = input('Enter space-separated shopping items: ')\n\nshopping_list = user_input.split()\n\nprint(shopping_list)  # \xf0\x9f\x91\x89\xef\xb8\x8f ['apple', 'banana', 'kiwi']\nThe str.split() method\nsplits the string into a list of substrings using a delimiter.When no separator is passed to the str.split() method, it splits the input string on one or more whitespace characters.# Take a list of integers from user Input using str.split()If you need to convert the values to numbers,\nuse a list comprehension.main.pyCopied!user_input = input('Enter space-separated integers: ').split()\n\nlist_of_integers = [int(item) for item in user_input]\n\nprint(list_of_integers)  # \xf0\x9f\x91\x89\xef\xb8\x8f [1, 2, 3]\nList comprehensions are used to perform some operation for every element or select a subset of elements that meet a condition.On each iteration, we pass the current list item to the int() class to convert\nit to an integer.# Take list user input using a while loopThis is a three-step process:Declare a new variable and initialize it to an empty list.Use a while loop to iterate as long as a condition is met.On each iteration, append the input value to the list.main.pyCopied!my_list = []\n\nuser_input = ''\n\nwhile len(my_list) < 3:\n    user_input = input('Enter a word: ')\n\n    my_list.append(user_input)\n\nprint(my_list)\nThe example uses a while loop to ask the user for input until the list\ncontains at least 3 items.# Take a list of integers from user Input using a while loopYou can also use this approach to make sure the list contains at least N\nintegers.main.pyCopied!my_list = []\n\nuser_input = ''\n\nwhile len(my_list) < 3:\n    try:\n        user_input = int(input('Enter an integer: '))\n        my_list.append(user_input)\n    except ValueError:\n        print('Enter a valid integer')\n        continue\n\nprint(my_list)\nThe example uses a while loop to iterate until the list contains at least 3\nintegers taken from user input.The continue statement\nis used to continue to the next iteration of the loop.If the code in the try block raises a ValueError, the except block runs, where we use the continue statement to continue to the next iteration.When validating user input in a while loop,\nwe use the continue statement when the input is invalid, e.g. in an except\nblock or an if statement.Alternatively, you can use a while True loop with a break statement.main.pyCopied!my_list = []\n\nuser_input = ''\n\nwhile True:\n    if len(my_list) >= 3:\n        break\n\n    try:\n        user_input = int(input('Enter an integer: '))\n        my_list.append(user_input)\n    except ValueError:\n        print('Enter a valid integer')\n        continue\n\nprint(my_list)\nThe if statement checks if the length of the list is equal to or greater\nthan 3.If the condition is met, we use the break statement to exit out of the loop.The break statement breaks out of the\ninnermost enclosing for or while loop.# Take a List of Lists user inputTo take a list of lists user input:Use a for loop to iterate N times.Use the input() function to take multiple inputs from the user.Add the input values to a list and append the list to the original list.main.pyCopied!list_of_lists = []\n\nuser_input = ''\n\nfor _ in range(2):\n    user_input_1 = input('Enter a word: ')\n    user_input_2 = input('Enter another word: ')\n\n    list_of_lists.append([user_input_1, user_input_2])\n\nprint(list_of_lists)\nWe used a for loop to iterate 2 times.On each iteration, we take user input 2 times, place the values in a list and\nappend the list to another list.# Take a two-dimensional list of integers from user inputTo take a two-dimensional list of integers from user input:Use a for loop to iterate N times.Use the input() function to take multiple inputs from the user.Use the int() class to convert the values to integers.Add the input values to a list and append the list to the original list.main.pyCopied!list_of_lists = []\n\nuser_input = ''\n\nfor _ in range(2):\n    user_input_1 = int(input('Enter an integer: '))\n    user_input_2 = int(input('Enter another integer: '))\n\n    list_of_lists.append([user_input_1, user_input_2])\n\nprint(list_of_lists)\nWe used a for loop to iterate 2 times.On each iteration, we take user input 2 times and convert the values to\nintegers.Lastly, we place the values in a list and append the list to another list.# Additional ResourcesYou can learn more about the related topics by checking out the following\ntutorials:How to Add user input to a Dictionary in PythonHow to check if User Input is Empty in PythonUsing a For or While Loop to take user input in Pythono-\nTaking user input boolean (True/False) values in PythonHow to Create a Date from user Input in PythonTaking a file path from user input in PythonHow to take Float user input in PythonMultiple lines user Input in PythonOnly accept a single character from user Input in PythonCreating a Tuple or a Set from user Input in PythonHow to Validate user input in PythonYes/No question with user input in PythonHow to save user input to a File in PythonUsing user input to Select an Option from a List in PythonI wrote a book in which I share everything I know about how to become a better, more efficient programmer.You can use the search field on my Home Page to filter through all of my articles.ShareShareShareShareShareBorislav HadzhievWeb DeveloperTwitterGitHubLinkedinAboutContactsPolicyTerms & ConditionsTwitterGitHubLinkedinCopyright \xc2\xa9 2023 Borislav HadzhievSearch for posts0.................................................................................................................................................................."